# pylint: skip-file
import context
import unittest
from sheets import *

class TestMethods(unittest.TestCase):
    def setUp(self):
        self.workbook = Workbook()
        _, self.s1 = self.workbook.new_sheet()

    def test_AND(self):
        self.workbook.set_cell_contents(self.s1, 'a1', '= AND(true, false)')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, bool)
        self.assertEqual(a1_val, False)
        self.workbook.set_cell_contents(self.s1, 'a1', '= AND(true, true)')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, bool)
        self.assertEqual(a1_val, True)
        self.workbook.set_cell_contents(self.s1, 'a1', '= AND(true, true, false)')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, bool)
        self.assertEqual(a1_val, False)
        self.workbook.set_cell_contents(self.s1, 'a1', '= AND()')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, CellError)
        self.assertEqual(a1_val.get_type(), CellErrorType(5))
        self.workbook.set_cell_contents(self.s1, 'a1', '= AND(0, 1, 0)')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, bool)
        self.assertEqual(a1_val, False)
        self.workbook.set_cell_contents(self.s1, 'a1', '= AND(\"false\", \"false\")')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, bool)
        self.assertEqual(a1_val, False)
        self.workbook.set_cell_contents(self.s1, 'a1', '= AND(\"Nearl\")')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, CellError)
        self.assertEqual(a1_val.get_type(), CellErrorType(5))

    def test_OR(self):
        self.workbook.set_cell_contents(self.s1, 'a1', '= OR(true, false)')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, bool)
        self.assertEqual(a1_val, True)
        self.workbook.set_cell_contents(self.s1, 'a1', '= OR(False, False)')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, bool)
        self.assertEqual(a1_val, False)
        self.workbook.set_cell_contents(self.s1, 'a1', '= OR(False, true, false)')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, bool)
        self.assertEqual(a1_val, True)
        self.workbook.set_cell_contents(self.s1, 'a1', '= OR()')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, CellError)
        self.assertEqual(a1_val.get_type(), CellErrorType(5))
        self.workbook.set_cell_contents(self.s1, 'a1', '= OR(0, 1, 0)')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, bool)
        self.assertEqual(a1_val, True)
        self.workbook.set_cell_contents(self.s1, 'a1', '= OR(\"false\", \"false\")')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, bool)
        self.assertEqual(a1_val, False)
        self.workbook.set_cell_contents(self.s1, 'a1', '= OR(\"Astesia\")')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, CellError)
        self.assertEqual(a1_val.get_type(), CellErrorType(5))

    def test_NOT(self):
        self.workbook.set_cell_contents(self.s1, 'a1', '= NOT(true)')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, bool)
        self.assertEqual(a1_val, False)
        self.workbook.set_cell_contents(self.s1, 'a1', '= NOT(false)')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, bool)
        self.assertEqual(a1_val, True)
        self.workbook.set_cell_contents(self.s1, 'a1', '= NOT(1)')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, bool)
        self.assertEqual(a1_val, False)
        self.workbook.set_cell_contents(self.s1, 'a1', '= NOT()')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, CellError)
        self.assertEqual(a1_val.get_type(), CellErrorType(5))
        self.workbook.set_cell_contents(self.s1, 'a1', '= NOT(true, false)')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, CellError)
        self.assertEqual(a1_val.get_type(), CellErrorType(5))
        self.workbook.set_cell_contents(self.s1, 'a1', '= NOT(\"Shining\")')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, CellError)
        self.assertEqual(a1_val.get_type(), CellErrorType(5))
        self.workbook.set_cell_contents(self.s1, 'a1', '= NOT(\"false\")')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, bool)
        self.assertEqual(a1_val, True)

    def test_XOR(self):
        self.workbook.set_cell_contents(self.s1, 'a1', '= XOR(true, false)')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, bool)
        self.assertEqual(a1_val, True)
        self.workbook.set_cell_contents(self.s1, 'a1', '= XOR(true, true)')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, bool)
        self.assertEqual(a1_val, False)
        self.workbook.set_cell_contents(self.s1, 'a1', '= XOR(true, true, false)')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, bool)
        self.assertEqual(a1_val, False)
        self.workbook.set_cell_contents(self.s1, 'a1', '= XOR()')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, CellError)
        self.assertEqual(a1_val.get_type(), CellErrorType(5))
        self.workbook.set_cell_contents(self.s1, 'a1', '= XOR(\"Kalsit\")')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, CellError)
        self.assertEqual(a1_val.get_type(), CellErrorType(5))
        self.workbook.set_cell_contents(self.s1, 'a1', '= XOR(0, 1, \"false\")')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, bool)
        self.assertEqual(a1_val, True)

    def test_nested_boolean_logic(self):
        self.workbook.set_cell_contents(self.s1, 'a1', '= OR(NOT(false), false)')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, bool)
        self.assertEqual(a1_val, True)
        self.workbook.set_cell_contents(self.s1, 'a1', '= XOR(true, AND(true, true))')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, bool)
        self.assertEqual(a1_val, False)
        self.workbook.set_cell_contents(self.s1, 'a1', '= AND(true, OR(0, 1), NOT(0))')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, bool)
        self.assertEqual(a1_val, True)
        self.workbook.set_cell_contents(self.s1, 'a1', '= OR(XOR(), AND(1, 1))')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, CellError)
        self.assertEqual(a1_val.get_type(), CellErrorType(5))
        self.workbook.set_cell_contents(self.s1, 'a1', '= NOT(XOR(\"Rosmontis\"))')
        a1_val = self.workbook.get_cell_value(self.s1, 'a1')
        self.assertIsInstance(a1_val, CellError)
        self.assertEqual(a1_val.get_type(), CellErrorType(5))

if __name__ == '__main__':
    unittest.main()
